{"version":3,"sources":["Bll/actions.ts","Bll/selectors.ts","Components/Buttons/Button/Button.tsx","Components/Tablo/Display.tsx","Components/Counters/Counter_v1.tsx","Components/Counters/Counter_v2.tsx","Components/Containers/CounterContainer.tsx","App.tsx","reportWebVitals.ts","Bll/counterReducer.ts","Bll/store.ts","index.tsx"],"names":["ACTIONS_TYPES","selectCounter","state","counter","setCounter","type","SET_COUNTER","payload","setStartValue","startValue","SET_START_VALUE","setMaxValue","maxValue","SET_MAX_VALUE","setError","error","SET_ERROR","setVersionCounter","versionCounter","SET_VERSION_COUNTER","setAfterSaveValues","afterSaveMaxValue","afterSaveStartValue","SET_AFTER_SAVE_VALUES","Button","name","callback","disabled","restProps","className","onClick","Display","React","memo","value","displayStyle","CounterV1","maxValueHandler","startValueHandler","onFocusHandler","saveSettingsHandler","inc","reset","spanError","inputError","onFocus","min","onChange","CounterV2","saveSettings","useState","mode","setMode","CounterContainer","useSelector","dispatch","useDispatch","useCallback","e","currentTarget","Number","isInteger","setLocalStorageValues","localStorage","setItem","JSON","stringify","setLocalStorageVersionCounter","version","useEffect","max","getItem","parse","getLocalStorageHandler","console","log","Switch","checked","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducers","combineReducers","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38ba7b6e.chunk.js","sourcesContent":["export enum ACTIONS_TYPES {\r\n    SET_COUNTER = 'Counter/SET_COUNTER',\r\n    SET_START_VALUE = 'Counter/SET_START_VALUE',\r\n    SET_MAX_VALUE = 'Counter/SET_MAX_VALUE',\r\n    SET_ERROR = 'Counter/SET_ERROR',\r\n    SET_VERSION_COUNTER='Counter/SET_VERSION_COUNTER',\r\n    SET_AFTER_SAVE_VALUES='Counter/SET_AFTER_SAVE_VALUES'\r\n}\r\nexport type SetCounterType = {\r\n    type:ACTIONS_TYPES.SET_COUNTER\r\n    payload:{\r\n        counter:number\r\n    }\r\n}\r\nexport type SetStartValueType = {\r\n    type:ACTIONS_TYPES.SET_START_VALUE\r\n    payload:{\r\n        startValue:number\r\n    }\r\n}\r\nexport type SetMaxValueType = {\r\n    type:ACTIONS_TYPES.SET_MAX_VALUE\r\n    payload:{\r\n        maxValue:number\r\n    }\r\n}\r\nexport type SetErrorValueType = {\r\n    type:ACTIONS_TYPES.SET_ERROR\r\n    payload:{\r\n        error:string\r\n    }\r\n}\r\nexport type SetVersionCounterType = {\r\n    type:ACTIONS_TYPES.SET_VERSION_COUNTER\r\n    payload:{\r\n        versionCounter:boolean\r\n    }\r\n}\r\nexport type SetAfterSaveValues = {\r\n    type:ACTIONS_TYPES.SET_AFTER_SAVE_VALUES\r\n    payload:{\r\n        afterSaveMaxValue:number\r\n        afterSaveStartValue:number\r\n    }\r\n}\r\n\r\nexport type CounterReducersTypes =\r\n    SetCounterType |\r\n    SetStartValueType |\r\n    SetMaxValueType |\r\n    SetErrorValueType |\r\n    SetVersionCounterType |\r\n    SetAfterSaveValues\r\n\r\nexport const setCounter = (counter:number):SetCounterType => {\r\n    return {\r\n        type:ACTIONS_TYPES.SET_COUNTER,\r\n        payload:{\r\n            counter,\r\n        },\r\n    }\r\n}\r\nexport const setStartValue = (startValue:number):SetStartValueType => {\r\n    return {\r\n        type:ACTIONS_TYPES.SET_START_VALUE,\r\n        payload:{\r\n            startValue,\r\n        },\r\n    }\r\n}\r\nexport const setMaxValue = (maxValue:number):SetMaxValueType => {\r\n    return {\r\n        type:ACTIONS_TYPES.SET_MAX_VALUE,\r\n        payload:{\r\n            maxValue,\r\n        },\r\n    }\r\n}\r\nexport const setError = (error:string):SetErrorValueType => {\r\n    return {\r\n        type:ACTIONS_TYPES.SET_ERROR,\r\n        payload:{\r\n            error,\r\n        },\r\n    }\r\n}\r\nexport const setVersionCounter = (versionCounter:boolean):SetVersionCounterType => {\r\n    return {\r\n        type:ACTIONS_TYPES.SET_VERSION_COUNTER,\r\n        payload:{\r\n            versionCounter,\r\n        },\r\n    }\r\n}\r\nexport const setAfterSaveValues = (afterSaveMaxValue:number,afterSaveStartValue:number):SetAfterSaveValues => {\r\n    return {\r\n        type:ACTIONS_TYPES.SET_AFTER_SAVE_VALUES,\r\n        payload:{\r\n            afterSaveMaxValue,\r\n            afterSaveStartValue,\r\n        },\r\n    }\r\n}","import {IGlobalStateType} from \"./store\";\r\n\r\nexport const selectCounter = (state:IGlobalStateType) => state.counter","import React from \"react\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport function Button ({\r\n                            name,\r\n                            callback,\r\n                            disabled,\r\n                            ...restProps\r\n                        }:ButtonType) {\r\n\r\n    return (\r\n        <button\r\n            className={\"butt\"}\r\n            disabled={disabled}\r\n            onClick={callback}\r\n            {...restProps}\r\n        >\r\n            {name}\r\n        </button>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype DisplayType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display = React.memo(function ({\r\n                                                value,\r\n                                                maxValue\r\n                                            }: DisplayType) {\r\n    const displayStyle = (value === maxValue ? \"displayMax\" : \"displayDefault\")\r\n\r\n    return (\r\n        <div className={\"display\"}>\r\n            <div className={displayStyle}>{value}</div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from 'react';\r\nimport {Button} from \"../Buttons/Button/Button\";\r\nimport {Display} from \"../Tablo/Display\";\r\n\r\ntype CounterType = {\r\n    counter: number\r\n    maxValue: number\r\n    startValue: number\r\n    afterSaveMaxValue: number\r\n    afterSaveStartValue: number\r\n    error: string\r\n    maxValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    startValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onFocusHandler: () => void\r\n    saveSettingsHandler: () => void\r\n    inc: () => void\r\n    reset: () => void\r\n};\r\n\r\nexport const CounterV1 = React.memo(function ({\r\n                                                  counter,\r\n                                                  maxValue,\r\n                                                  startValue,\r\n                                                  afterSaveMaxValue,\r\n                                                  afterSaveStartValue,\r\n                                                  error,\r\n                                                  maxValueHandler,\r\n                                                  startValueHandler,\r\n                                                  onFocusHandler,\r\n                                                  saveSettingsHandler,\r\n                                                  inc,\r\n                                                  reset,\r\n                                              }: CounterType) {\r\n        const spanError = maxValue < startValue || maxValue < 0 ? \"spanError\" : \"spanDefault\"\r\n        const inputError = maxValue < startValue || maxValue < 0 ? \"inputSetError\" : \"inputSet\"\r\n        return (\r\n            <div className={\"v1\"}>\r\n                <div className={\"wrapper\"}>\r\n                    <div className={\"display\"}>\r\n                    <span\r\n                        className={spanError}>\r\n                        Max Value\r\n                    </span>\r\n                        <input\r\n                            onFocus={onFocusHandler}\r\n                            value={maxValue}\r\n                            className={inputError}\r\n                            min={0}\r\n                            onChange={maxValueHandler}\r\n                        />\r\n                        <br/>\r\n                        <span\r\n                            className={spanError}>\r\n                        Start Value\r\n                    </span>\r\n                        <input\r\n                            onFocus={onFocusHandler}\r\n                            value={startValue}\r\n                            className={inputError}\r\n                            min={0}\r\n                            onChange={startValueHandler}\r\n                        />\r\n                    </div>\r\n                    <span className={\"buttContainerSet\"}>\r\n                    <Button\r\n                        disabled={\r\n                            (startValue >= maxValue) || (startValue < 0) || (afterSaveMaxValue === maxValue && afterSaveStartValue === startValue)\r\n                        }\r\n                        name={\"SAVE\"}\r\n                        callback={saveSettingsHandler}\r\n                    />\r\n                </span>\r\n                </div>\r\n                <div>\r\n                    <div className={\"wrapper\"}>\r\n                        {error\r\n                            ? <div className={\"display\"}>\r\n                                <div className={\"error\"}>{error}</div>\r\n                            </div>\r\n                            : <Display value={counter} maxValue={maxValue}/>\r\n                        }\r\n                        <span className={\"buttContainer\"}>\r\n                    <Button name={\"INC\"} callback={inc} disabled={error ? true : false || counter === maxValue}/>\r\n                    <Button name={\"RESET\"} callback={reset} disabled={error ? true : false || counter === startValue}/>\r\n                </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Display} from \"../Tablo/Display\";\r\nimport {Button} from \"../Buttons/Button/Button\";\r\n\r\ntype CounterType = {\r\n    counter: number\r\n    maxValue: number\r\n    startValue: number\r\n    maxValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    startValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    saveSettings: () => void\r\n    inc: () => void\r\n    reset: () => void\r\n\r\n\r\n};\r\n\r\nexport const CounterV2 = React.memo(function ({\r\n                                                  counter,\r\n                                                  maxValue,\r\n                                                  startValue,\r\n                                                  maxValueHandler,\r\n                                                  startValueHandler,\r\n                                                  saveSettings,\r\n                                                  inc,\r\n                                                  reset,\r\n                                              }: CounterType) {\r\n\r\n        const [mode, setMode] = useState<boolean>(true)\r\n        const spanError = maxValue < startValue || maxValue < 0 ? \"spanError\" : \"spanDefault\"\r\n        const inputError = maxValue < startValue || maxValue < 0 ? \"inputSetError\" : \"inputSet\"\r\n\r\n        return (\r\n            mode\r\n                ? <div>\r\n                    <div className={\"wrapper\"}>\r\n                        <Display value={counter} maxValue={maxValue}/>\r\n                        <span className={\"buttContainer\"}>\r\n                    <Button name={\"INC\"} callback={inc} disabled={counter >= maxValue}/>\r\n                    <Button name={\"RESET\"} callback={reset} disabled={counter === startValue}/>\r\n                    <Button name={\"SET\"} callback={() => {\r\n                        setMode(!mode)\r\n                    }}/>\r\n                </span>\r\n                    </div>\r\n                </div>\r\n                : <div className={\"wrapper\"}>\r\n                    <div className={\"display\"}>\r\n                        <span className={spanError}>Max Value </span>\r\n                        <input\r\n                            value={maxValue}\r\n                            min={0}\r\n                            className={inputError}\r\n                            onChange={maxValueHandler}\r\n                        />\r\n                        <br/>\r\n                        <span className={spanError}>Start Value</span>\r\n                        <input\r\n                            value={startValue}\r\n                            className={inputError}\r\n                            min={0}\r\n                            onChange={startValueHandler}\r\n                        />\r\n                    </div>\r\n                    <span className={\"buttContainerSet\"}>\r\n                    <Button\r\n                        disabled={startValue >= maxValue || startValue < 0}\r\n                        name={\"SAVE\"}\r\n                        callback={() => {\r\n                            setMode(!mode);\r\n                            saveSettings()\r\n                        }}\r\n                    />\r\n                </span>\r\n                </div>\r\n\r\n        )\r\n    }\r\n)","import React, {ChangeEvent, Dispatch, useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCounter} from \"../../Bll/selectors\";\r\nimport {\r\n    CounterReducersTypes, setAfterSaveValues,\r\n    setCounter,\r\n    setError,\r\n    setMaxValue,\r\n    setStartValue,\r\n    setVersionCounter\r\n} from \"../../Bll/actions\";\r\n\r\nimport {CounterV1} from \"../Counters/Counter_v1\";\r\nimport {CounterV2} from \"../Counters/Counter_v2\";\r\nimport {Switch} from \"@material-ui/core\";\r\n\r\n\r\nexport const CounterContainer = React.memo( function () {\r\n    const {\r\n        counter,\r\n        startValue,\r\n        maxValue,\r\n        error,\r\n        versionCounter,\r\n        afterSaveMaxValue,\r\n        afterSaveStartValue,\r\n    } = useSelector(selectCounter)\r\n    const dispatch = useDispatch<Dispatch<CounterReducersTypes>>()\r\n\r\n\r\n\r\n    //const [counter, setCounter] = useState<number>(0)\r\n    const inc = useCallback (() => {if (counter < maxValue) {dispatch(setCounter(counter + 1))}},[dispatch,maxValue,counter])\r\n    const reset = useCallback (() => {dispatch(setCounter(startValue))},[dispatch,startValue])\r\n\r\n    // const [startValue, setStartValue] = useState<number>(0)\r\n    // const [maxValue, setMaxValue] = useState<number>(0)\r\n\r\n\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        if (Number.isInteger(+value)) {//проверка на целое число\r\n            dispatch(setMaxValue(Number(e.currentTarget.value)))\r\n        }\r\n    }\r\n\r\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        if(Number.isInteger(+value)) {//проверка на целое число\r\n            dispatch(setStartValue(Number(value)))\r\n            dispatch(setCounter(Number(value)))\r\n        }\r\n    }\r\n//error\r\n    //const [error,setError] = useState<string>('')\r\n    const onFocusHandler = () => {\r\n        dispatch(setAfterSaveValues(0,0))\r\n        dispatch(setError('enter values and press \"save\"'))}\r\n\r\n//button save (counter v1)\r\n    const saveSettingsHandler = () => {\r\n        setLocalStorageValues()\r\n        dispatch(setError(''))\r\n        dispatch(setCounter(startValue))\r\n        dispatch(setAfterSaveValues(maxValue,startValue))\r\n\r\n    }\r\n//button set (counter v2)\r\n    const setSettingsHandler = () => {\r\n        setLocalStorageValues()\r\n        dispatch(setCounter(startValue))\r\n        dispatch(setAfterSaveValues(maxValue,startValue))\r\n    }\r\n//localstorage\r\n    const setLocalStorageValues = () => {\r\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"StartValue\", JSON.stringify(startValue))\r\n        localStorage.setItem(\"afterSaveStartValue\", JSON.stringify(startValue))\r\n        localStorage.setItem(\"afterSaveMaxValue\", JSON.stringify(maxValue))\r\n    }\r\n    const setLocalStorageVersionCounter = (version:boolean) => {\r\n        localStorage.setItem(\"VersionCounter\", JSON.stringify(version))}\r\n\r\n    const getLocalStorageHandler = () => {\r\n        let max = localStorage.getItem(\"MaxValue\")\r\n        let min = localStorage.getItem(\"StartValue\")\r\n        let version = localStorage.getItem(\"VersionCounter\")\r\n\r\n        dispatch(setVersionCounter(version && JSON.parse(version)))\r\n        //если в localstorage нет значений\r\n        if(max === null||min===null){\r\n            dispatch(setMaxValue(0))\r\n            dispatch(setStartValue(0))\r\n            dispatch(setCounter(0))\r\n            dispatch(setAfterSaveValues(0,0))\r\n        }\r\n        //если значения есть\r\n        else if(Number.isInteger(Number(max) && Number(min))){\r\n            dispatch(setMaxValue(max && JSON.parse(max)))\r\n            dispatch(setStartValue(min && JSON.parse(min)))\r\n            dispatch(setCounter(min && JSON.parse(min)))\r\n            dispatch(setAfterSaveValues(max && JSON.parse(max),min && JSON.parse(min)))\r\n        }\r\n        //если в localstorage !number\r\n        else{\r\n            dispatch(setCounter(0))\r\n            dispatch(setStartValue(0))\r\n            dispatch(setMaxValue(0))\r\n        }\r\n    }\r\n//useEffects\r\n    //забирает из localstorage стартовое состояния или зануляет, если не проходит валидацию\r\n    useEffect(() => {\r\n         getLocalStorageHandler()}, [])\r\n\r\n    useEffect(() => {\r\n       setLocalStorageVersionCounter(versionCounter)}, [versionCounter]);\r\n    // useEffect(()=> {\r\n    //     window.addEventListener('DOMContentLoaded',(e)=>{\r\n    //         console.log(e)\r\n    //     })\r\n    // },[])\r\n\r\n\r\n\r\n\r\n     console.log(\"div\")\r\n//UI\r\n    return (\r\n\r\n        versionCounter\r\n\r\n            ?<div className=\"App\">\r\n            <div className={\"switch\"}>\r\n            <span>\r\n                v1\r\n                <Switch\r\n                    checked={versionCounter}\r\n                    onChange={() => {\r\n                        dispatch(setVersionCounter(!versionCounter));\r\n                        setLocalStorageVersionCounter(versionCounter)}}\r\n                />\r\n                v2\r\n            </span>\r\n            </div>\r\n                <CounterV2\r\n                    startValue={startValue}\r\n                    counter={counter}\r\n                    maxValue={maxValue}\r\n                    maxValueHandler={maxValueHandler}\r\n                    inc={inc}\r\n                    reset={reset}\r\n                    startValueHandler={startValueHandler}\r\n                    saveSettings={setSettingsHandler}\r\n                />\r\n        </div>\r\n            : <div className=\"App\">\r\n                <div className={\"switch\"}>\r\n                    <span>\r\n                        v1\r\n                        <Switch\r\n                            checked={versionCounter}\r\n                            onChange={() => {\r\n                                dispatch(setVersionCounter(!versionCounter));\r\n                                setLocalStorageVersionCounter(versionCounter)}}\r\n                        />\r\n                        v2\r\n                    </span>\r\n                </div>\r\n                <CounterV1\r\n                    afterSaveMaxValue={afterSaveMaxValue}\r\n                    afterSaveStartValue={afterSaveStartValue}\r\n                    startValue={startValue}\r\n                    counter={counter}\r\n                    maxValue={maxValue}\r\n                    inc={inc}\r\n                    reset={reset}\r\n                    error={error}\r\n                    maxValueHandler={maxValueHandler}\r\n                    startValueHandler={startValueHandler}\r\n                    onFocusHandler={onFocusHandler}\r\n                    saveSettingsHandler={saveSettingsHandler}\r\n                />\r\n            </div>\r\n    )\r\n})","import React from 'react';\nimport './App.css';\nimport {CounterContainer} from \"./Components/Containers/CounterContainer\";\n\n\nfunction App() {\n\n\n    //отображения версиии счетчика\n    //const [versionCounter, setVersionCounter] = useState<boolean>(false)\n\n\n\n//UI\n\n    return (\n            <div>\n\n                <CounterContainer/>\n            </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ACTIONS_TYPES, CounterReducersTypes} from \"./actions\";\r\n\r\nexport type InitialStateType = {\r\n    counter:number\r\n    startValue: number\r\n    maxValue: number\r\n    afterSaveMaxValue:number\r\n    afterSaveStartValue:number\r\n    versionCounter:boolean\r\n    error:string\r\n}\r\nconst initialState = {\r\n    counter:0,\r\n    startValue: 0,\r\n    maxValue:0,\r\n    afterSaveMaxValue:0,\r\n    afterSaveStartValue:0,\r\n    versionCounter:false,\r\n    error:'',\r\n}\r\n\r\nexport const counterReducer =(state:InitialStateType = initialState, action:CounterReducersTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPES.SET_COUNTER:\r\n        case ACTIONS_TYPES.SET_START_VALUE:\r\n        case ACTIONS_TYPES.SET_MAX_VALUE:\r\n        case ACTIONS_TYPES.SET_ERROR:\r\n        case ACTIONS_TYPES.SET_VERSION_COUNTER:\r\n        case ACTIONS_TYPES.SET_AFTER_SAVE_VALUES:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\nexport type IGlobalStateType = ReturnType<typeof rootReducers>\r\n\r\nexport const rootReducers = combineReducers({\r\n    counter:counterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}