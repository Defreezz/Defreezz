{"version":3,"sources":["Tablo/Display.tsx","Buttons/Button/Button.tsx","Counter_v2.tsx","Counter_v1.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","value","maxValue","startValue","displayStyle","className","Button","name","callback","disabled","onClick","CounterV2","useState","counter","setCounter","setStartValue","setMaxValue","useEffect","getLocalStorageHandler","max","localStorage","getItem","min","JSON","parse","mode","setMode","type","onChange","e","Number","currentTarget","setItem","stringify","CounterV1","App","changeVersion","setChangeVersion","setLocalStorage","version","Switch","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d358f918.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayType = {\r\n    value:number\r\n    maxValue:number\r\n    startValue:number\r\n}\r\n\r\nexport function Display  ({value,maxValue,startValue}:DisplayType) {\r\n    const displayStyle = (value === maxValue ? \"displayMax\" : \"displayDefault\")\r\n\r\n    return (\r\n        <div className={\"display\"}>\r\n            {startValue > maxValue\r\n            ?<div className={displayStyle}>{\"АШИПКА\"}</div>\r\n            :<div className={displayStyle}>{value}</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport function Button ({name,callback,disabled}:ButtonType) {\r\n\r\n    return (\r\n        <button\r\n            className={\"butt\"}\r\n            disabled={disabled}\r\n            onClick={callback}>\r\n            {name}\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Display} from \"./Tablo/Display\";\r\nimport {Button} from \"./Buttons/Button/Button\";\r\n\r\nexport function CounterV2 () {\r\n    //BLL\r\n\r\n    const [counter, setCounter] = useState<number>(0)\r\n    const inc = () => {if (counter < maxValue) {setCounter(counter + 1) }}\r\n    const reset = () => {setCounter(startValue)}\r\n\r\n\r\n    const  [startValue,setStartValue] = useState<number>(0)\r\n\r\n\r\n    const [maxValue, setMaxValue] = useState<number>(0)\r\n    const maxValueHandler = (e:ChangeEvent<HTMLInputElement>) => {setMaxValue(Number(e.currentTarget.value))}\r\n\r\n\r\n    //  локалстораж\r\n    const setLocalStorage = () => {\r\n        localStorage.setItem(\"MaxValue\",JSON.stringify(maxValue))\r\n        localStorage.setItem(\"StartValue\",JSON.stringify(startValue))\r\n    }\r\n    useEffect(() => {getLocalStorageHandler()},[])\r\n\r\n\r\n    const getLocalStorageHandler = () => {\r\n        let max = localStorage.getItem(\"MaxValue\")\r\n        let min = localStorage.getItem(\"StartValue\")\r\n        setMaxValue(max && JSON.parse(max))\r\n        setStartValue(min && JSON.parse(min))\r\n        setCounter(min && JSON.parse(min))\r\n        max === null && setCounter(0)\r\n        max === null && setStartValue(0)\r\n        max === null && setMaxValue(0)\r\n    }\r\n\r\n\r\n    // стейт отображения настроек счетчика\r\n    const [mode, setMode] = useState<boolean>(true)\r\n    const saveSettings = () => {\r\n        setMode(!mode)\r\n        setLocalStorage()\r\n        setCounter(startValue)\r\n    }\r\n//логика ошибки\r\n\r\n\r\n    //UI\r\n    return (\r\n        mode\r\n            ? <div >\r\n                <div className={\"wrapper\"}>\r\n                    <Display value={counter} maxValue={maxValue} startValue={startValue}/>\r\n                    <span className={\"buttContainer\"}>\r\n                    <Button name={\"INC\"} callback={inc} disabled={counter >= maxValue}/>\r\n                    <Button name={\"RESET\"} callback={reset} disabled={counter === startValue}/>\r\n                    <Button name={\"SET\"} callback={() => {setMode(!mode)}}/>\r\n                </span>\r\n                </div>\r\n            </div>\r\n            :\r\n                <div className={\"wrapper\"}>\r\n                    <div className={\"display\"}>\r\n\r\n                        <span className={maxValue<=startValue?\"spanError\":\"\"}>Max Value </span>\r\n                        <input\r\n                            value={maxValue}\r\n                            className={maxValue<=startValue?\"inputSetError\":\"inputSet\"}\r\n                            type={\"number\"}\r\n                            onChange={maxValueHandler}\r\n                        />\r\n                        <br/>\r\n                        <span className={maxValue<=startValue?\"spanError\":\"\"}>Start Value</span>\r\n                        <input\r\n                            value={startValue}\r\n                            className={maxValue<=startValue || startValue < 0?\"inputSetError\":\"inputSet\"}\r\n                            type={\"number\"}\r\n                            onChange={(e)=>{setStartValue(Number(e.currentTarget.value)); setCounter(Number(e.currentTarget.value))}}\r\n                        />\r\n                    </div>\r\n\r\n                    <span className={\"buttContainerSet\"}>\r\n                    <Button\r\n                        disabled={startValue >= maxValue || startValue < 0}\r\n                        name={\"SAVE\"}\r\n                        callback={saveSettings}\r\n\r\n                    />\r\n                </span>\r\n                </div>\r\n\r\n    )\r\n\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Display} from \"./Tablo/Display\";\r\nimport {Button} from \"./Buttons/Button/Button\";\r\n\r\nexport function CounterV1() {\r\n    //BLL\r\n\r\n    const [counter, setCounter] = useState<number>(0)\r\n    const inc = () => {\r\n        if (counter < maxValue) {\r\n            setCounter(counter + 1)\r\n        }\r\n    }\r\n    const reset = () => {\r\n        setCounter(startValue)\r\n    }\r\n\r\n\r\n    const [startValue, setStartValue] = useState<number>(0)\r\n\r\n\r\n    const [maxValue, setMaxValue] = useState<number>(0)\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(Number(e.currentTarget.value))\r\n    }\r\n\r\n\r\n    //  localstorage\r\n    const setLocalStorage = () => {\r\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"StartValue\", JSON.stringify(startValue))\r\n    }\r\n    useEffect(() => {\r\n        getLocalStorageHandler()\r\n    }, [])\r\n\r\n\r\n    const getLocalStorageHandler = () => {\r\n        let max = localStorage.getItem(\"MaxValue\")\r\n        let min = localStorage.getItem(\"StartValue\")\r\n        setMaxValue(max && JSON.parse(max))\r\n        setStartValue(min && JSON.parse(min))\r\n        setCounter(min && JSON.parse(min))\r\n        max === null && setCounter(0)\r\n        max === null && setStartValue(0)\r\n        max === null && setMaxValue(0)\r\n    }\r\n\r\n    const saveSettings = () => {\r\n        setLocalStorage()\r\n        setCounter(startValue)\r\n    }\r\n//логика ошибки\r\n\r\n\r\n    //UI\r\n    return (\r\n        <div className={\"v1\"}>\r\n\r\n            <div className={\"wrapper\"}>\r\n                <div className={\"display\"}>\r\n\r\n                    <span className={maxValue <= startValue ? \"spanError\" : \"\"}>Max Value </span>\r\n                    <input\r\n                        value={maxValue}\r\n                        className={maxValue <= startValue ? \"inputSetError\" : \"inputSet\"}\r\n                        type={\"number\"}\r\n                        onChange={maxValueHandler}\r\n                    />\r\n                    <br/>\r\n                    <span className={maxValue <= startValue ? \"spanError\" : \"\"}>Start Value</span>\r\n                    <input\r\n                        value={startValue}\r\n                        className={maxValue <= startValue || startValue < 0 ? \"inputSetError\" : \"inputSet\"}\r\n                        type={\"number\"}\r\n                        onChange={(e) => {\r\n                            setStartValue(Number(e.currentTarget.value));\r\n                            setCounter(Number(e.currentTarget.value))\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <span className={\"buttContainerSet\"}>\r\n                    <Button\r\n                        disabled={startValue >= maxValue || startValue < 0}\r\n                        name={\"SAVE\"}\r\n                        callback={saveSettings}\r\n\r\n                    />\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <div className={\"wrapper\"}>\r\n                    <Display value={counter} maxValue={maxValue} startValue={startValue}/>\r\n                    <span className={\"buttContainer\"}>\r\n                    <Button name={\"INC\"} callback={inc} disabled={counter >= maxValue || startValue < 0}/>\r\n                    <Button name={\"RESET\"} callback={reset} disabled={counter === startValue}/>\r\n                </span>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, { useEffect, useState} from 'react';\nimport './App.css';\nimport {CounterV2} from \"./Counter_v2\";\nimport {Switch} from \"@material-ui/core\";\nimport {CounterV1} from \"./Counter_v1\";\n\n\nfunction App() {\n//логика отображения версиии счетчика\n    const [changeVersion, setChangeVersion] = useState<boolean>(false)\n\n//localstorage\n    const setLocalStorage = (version:boolean) => {\n        localStorage.setItem(\"VersionCounter\", JSON.stringify(version))    }\n\n    const getLocalStorageHandler = () => {\n        let version = localStorage.getItem(\"VersionCounter\")\n        setChangeVersion(version && JSON.parse(version))\n\n    }\n\n    useEffect(() => {\n        getLocalStorageHandler()\n        //setLocalStorage()\n    }, [])\n    useEffect(() => {\n        setLocalStorage(changeVersion)\n    }, [changeVersion])\n\n\n\n//UI\n\n    return (\n        changeVersion\n            ? <div className=\"App\">\n                <div className={\"switch\"}>\n                <span>\n                    v1\n                    <Switch\n                        checked={changeVersion}\n                        onChange={() => { setChangeVersion(!changeVersion);setLocalStorage(changeVersion)}}\n                    />\n                    v2\n                </span>\n                </div>\n                <CounterV2/>\n            </div>\n            : <div className=\"App\">\n                <div className={\"switch\"}>\n                   <span>\n                    v1\n                    <Switch\n                        checked={changeVersion}\n                        onChange={() => {setChangeVersion(!changeVersion);setLocalStorage(changeVersion)}}\n                    />\n                    v2\n                </span>\n\n\n                </div>\n                <CounterV1/>\n            </div>\n    )\n\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}