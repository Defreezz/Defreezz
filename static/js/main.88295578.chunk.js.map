{"version":3,"sources":["Tablo/Display.tsx","Buttons/Button/Button.tsx","Counter_v2.tsx","Counter_v1.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","value","displayStyle","maxValue","className","Button","name","callback","disabled","onClick","CounterV2","useState","counter","setCounter","startValue","setStartValue","setMaxValue","useEffect","getLocalStorageHandler","max","localStorage","getItem","min","JSON","parse","mode","setMode","type","onChange","e","Number","currentTarget","setItem","stringify","CounterV1","error","setError","onFocusHandler","setLocalStorage","onFocus","App","changeVersion","setChangeVersion","version","Switch","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88295578.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayType = {\r\n    value:number\r\n    maxValue:number\r\n}\r\n\r\nexport function Display  ({value,maxValue}:DisplayType) {\r\n    const displayStyle = (value === maxValue ? \"displayMax\" : \"displayDefault\")\r\n\r\n    return (\r\n        <div className={\"display\"}>\r\n            <div className={displayStyle}>{value}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport function Button ({name,callback,disabled}:ButtonType) {\r\n\r\n    return (\r\n        <button\r\n            className={\"butt\"}\r\n            disabled={disabled}\r\n            onClick={callback}>\r\n            {name}\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Display} from \"./Tablo/Display\";\r\nimport {Button} from \"./Buttons/Button/Button\";\r\n\r\nexport function CounterV2 () {\r\n    //BLL\r\n\r\n    const [counter, setCounter] = useState<number>(0)\r\n    const inc = () => {if (counter < maxValue) {setCounter(counter + 1) }}\r\n    const reset = () => {setCounter(startValue)}\r\n\r\n    const  [startValue,setStartValue] = useState<number>(0)\r\n\r\n    const [maxValue, setMaxValue] = useState<number>(0)\r\n    const maxValueHandler = (e:ChangeEvent<HTMLInputElement>) => {setMaxValue(Number(e.currentTarget.value))}\r\n\r\n    //  локалстораж\r\n    const setLocalStorage = () => {\r\n        localStorage.setItem(\"MaxValue\",JSON.stringify(maxValue))\r\n        localStorage.setItem(\"StartValue\",JSON.stringify(startValue))\r\n    }\r\n    useEffect(() => {getLocalStorageHandler()},[])\r\n\r\n    const getLocalStorageHandler = () => {\r\n        let max = localStorage.getItem(\"MaxValue\")\r\n        let min = localStorage.getItem(\"StartValue\")\r\n        setMaxValue(max && JSON.parse(max))\r\n        setStartValue(min && JSON.parse(min))\r\n        setCounter(min && JSON.parse(min))\r\n        max === null && setCounter(0)\r\n        max === null && setStartValue(0)\r\n        max === null && setMaxValue(0)\r\n    }\r\n\r\n    // стейт отображения настроек счетчика\r\n    const [mode, setMode] = useState<boolean>(true)\r\n    const saveSettings = () => {\r\n        setMode(!mode)\r\n        setLocalStorage()\r\n        setCounter(startValue)\r\n    }\r\n//логика ошибки\r\n\r\n    //UI\r\n    return (\r\n        mode\r\n            ? <div >\r\n                <div className={\"wrapper\"}>\r\n                    <Display value={counter} maxValue={maxValue} />\r\n                    <span className={\"buttContainer\"}>\r\n                    <Button name={\"INC\"} callback={inc} disabled={counter >= maxValue}/>\r\n                    <Button name={\"RESET\"} callback={reset} disabled={counter === startValue}/>\r\n                    <Button name={\"SET\"} callback={() => {setMode(!mode)}}/>\r\n                </span>\r\n                </div>\r\n            </div>\r\n            : <div className={\"wrapper\"}>\r\n                    <div className={\"display\"}>\r\n                        <span className={maxValue <= startValue || maxValue<=0?\"spanError\":\"spanDefault\"}>Max Value </span>\r\n                        <input\r\n                            value={maxValue}\r\n                            className={maxValue <= startValue || maxValue<=0?\"inputSetError\":\"inputSet\"}\r\n                            type={\"number\"}\r\n                            onChange={maxValueHandler}\r\n                        />\r\n                        <br/>\r\n                        <span className={maxValue <= startValue || maxValue<=0?\"spanError\":\"spanDefault\"}>Start Value</span>\r\n                        <input\r\n                            value={startValue}\r\n                            className={maxValue<=startValue || startValue < 0?\"inputSetError\":\"inputSet\"}\r\n                            type={\"number\"}\r\n                            onChange={(e)=>{setStartValue(Number(e.currentTarget.value)); setCounter(Number(e.currentTarget.value))}}\r\n                        />\r\n                    </div>\r\n                    <span className={\"buttContainerSet\"}>\r\n                    <Button\r\n                        disabled={startValue >= maxValue || startValue < 0}\r\n                        name={\"SAVE\"}\r\n                        callback={saveSettings}\r\n                    />\r\n                </span>\r\n                </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Display} from \"./Tablo/Display\";\r\nimport {Button} from \"./Buttons/Button/Button\";\r\n\r\nexport function CounterV1() {\r\n    //BLL\r\n    //\r\n    const [counter, setCounter] = useState<number>(0)\r\n    const inc = () => {if (counter < maxValue) {setCounter(counter + 1)}}\r\n    const reset = () => {setCounter(startValue)}\r\n    //\r\n    const [startValue, setStartValue] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(0)\r\n\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {setMaxValue(Number(e.currentTarget.value))}\r\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartValue(Number(e.currentTarget.value))\r\n        setCounter(Number(e.currentTarget.value))\r\n    }\r\n    //\r\n    //error\r\n    const [error,setError] = useState<string>('')\r\n    const onFocusHandler = () => {setError('enter values and press \"save\"')}\r\n    //\r\n    //button save\r\n    const saveSettingsHandler = () => {\r\n        setError('')\r\n        setLocalStorage()\r\n        setCounter(startValue)\r\n    }\r\n    //\r\n    //  localstorage\r\n    const setLocalStorage = () => {\r\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"StartValue\", JSON.stringify(startValue))\r\n    }\r\n\r\n    useEffect(() => { getLocalStorageHandler()}, [])\r\n\r\n    const getLocalStorageHandler = () => {\r\n        let max = localStorage.getItem(\"MaxValue\")\r\n        let min = localStorage.getItem(\"StartValue\")\r\n        setMaxValue(max && JSON.parse(max))\r\n        setStartValue(min && JSON.parse(min))\r\n        setCounter(min && JSON.parse(min))\r\n        max === null && setCounter(0)\r\n        max === null && setStartValue(0)\r\n        max === null && setMaxValue(0)\r\n    }\r\n\r\n    //UI\r\n    return (\r\n        <div className={\"v1\"}>\r\n            <div className={\"wrapper\"}>\r\n                <div className={\"display\"}>\r\n                    <span className={maxValue <= startValue || maxValue<=0 ? \"spanError\" : \"spanDefault\"}>Max Value </span>\r\n                    <input\r\n                        onFocus={onFocusHandler}\r\n                        value={maxValue}\r\n                        className={maxValue <= startValue || maxValue<=0 ? \"inputSetError\" : \"inputSet\"}\r\n                        type={\"number\"}\r\n                        onChange={maxValueHandler}\r\n                    />\r\n                    <br/>\r\n                    <span className={maxValue <= startValue || maxValue<=0 ? \"spanError\" : \"spanDefault\"}>Start Value</span>\r\n                    <input\r\n                        onFocus={onFocusHandler}\r\n                        value={startValue}\r\n                        className={maxValue <= startValue || startValue < 0 ? \"inputSetError\" : \"inputSet\"}\r\n                        type={\"number\"}\r\n                        onChange={startValueHandler}\r\n                    />\r\n                </div>\r\n                <span className={\"buttContainerSet\"}>\r\n                    <Button\r\n                        disabled={startValue >= maxValue || startValue < 0}\r\n                        name={\"SAVE\"}\r\n                        callback={saveSettingsHandler}\r\n                    />\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <div className={\"wrapper\"}>\r\n                    {error\r\n                        ?<div className={\"display\"}>\r\n                        <div className={\"error\"}>{error}</div>\r\n                        </div>\r\n                        :<Display value={counter} maxValue={maxValue}/>}\r\n\r\n                    {/*{startValue >= maxValue || startValue < 0*/}\r\n                    {/*    ?<div className={\"display\"}>*/}\r\n                    {/*        <div className={\"error\"}>{\"invalid input\"}</div>*/}\r\n                    {/*    </div>*/}\r\n                    {/*    :<Display value={counter} maxValue={maxValue}/>}*/}\r\n\r\n                    <span className={\"buttContainer\"}>\r\n                    <Button name={\"INC\"} callback={inc} disabled={error?true:false || counter === maxValue}/>\r\n                    <Button name={\"RESET\"} callback={reset} disabled={error?true:false || counter === startValue}/>\r\n                </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, { useEffect, useState} from 'react';\nimport './App.css';\nimport {CounterV2} from \"./Counter_v2\";\nimport {Switch} from \"@material-ui/core\";\nimport {CounterV1} from \"./Counter_v1\";\n\n\nfunction App() {\n//отображения версиии счетчика\n    const [changeVersion, setChangeVersion] = useState<boolean>(false)\n\n//localstorage\n    const setLocalStorage = (version:boolean) => {\n        localStorage.setItem(\"VersionCounter\", JSON.stringify(version))    }\n\n    const getLocalStorageHandler = () => {\n        let version = localStorage.getItem(\"VersionCounter\")\n        setChangeVersion(version && JSON.parse(version))\n    }\n\n    useEffect(() => {\n        getLocalStorageHandler()\n        //setLocalStorage()\n    }, [])\n    useEffect(() => {\n        setLocalStorage(changeVersion)\n    }, [changeVersion])\n\n\n//UI\n\n    return (\n        changeVersion\n            ? <div className=\"App\">\n                <div className={\"switch\"}>\n                <span>\n                    v1\n                    <Switch\n                        checked={changeVersion}\n                        onChange={() => { setChangeVersion(!changeVersion);setLocalStorage(changeVersion)}}\n                    />\n                    v2\n                </span>\n                </div>\n                <CounterV2/>\n            </div>\n            : <div className=\"App\">\n                <div className={\"switch\"}>\n                   <span>\n                    v1\n                    <Switch\n                        checked={changeVersion}\n                        onChange={() => {setChangeVersion(!changeVersion);setLocalStorage(changeVersion)}}\n                    />\n                    v2\n                </span>\n                </div>\n                <CounterV1/>\n            </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}