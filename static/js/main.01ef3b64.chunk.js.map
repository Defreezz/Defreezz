{"version":3,"sources":["Tablo/Display.tsx","Buttons/Button/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","value","maxValue","startValue","displayStyle","className","Button","name","callback","disabled","onClick","App","useState","counter","setCounter","setStartValue","setMaxValue","useEffect","getLocalStorageHandler","max","localStorage","getItem","min","JSON","parse","mode","setMode","type","onChange","e","Number","currentTarget","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01ef3b64.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayType = {\r\n    value:number\r\n    maxValue:number\r\n    startValue:number\r\n}\r\n\r\nexport function Display  ({value,maxValue,startValue}:DisplayType) {\r\n    const displayStyle = (value === maxValue ? \"displayMax\" : \"displayDefault\")\r\n\r\n    return (\r\n        <div className={\"display\"}>\r\n            {startValue > maxValue\r\n            ?<div className={displayStyle}>{\"АШИПКА\"}</div>\r\n            :<div className={displayStyle}>{value}</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport function Button ({name,callback,disabled}:ButtonType) {\r\n\r\n    return (\r\n        <button\r\n            className={\"butt\"}\r\n            disabled={disabled}\r\n            onClick={callback}>\r\n            {name}\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Display} from \"./Tablo/Display\";\nimport {Button} from \"./Buttons/Button/Button\";\n\n\n\nfunction App () {\n    //BLL\n\n    const [counter, setCounter] = useState<number>(0)\n    const inc = () => {if (counter < maxValue) {setCounter(counter + 1) }}\n    const reset = () => {setCounter(startValue)}\n\n\n    const  [startValue,setStartValue] = useState<number>(0)\n\n\n    const [maxValue, setMaxValue] = useState<number>(0)\n    const maxValueHandler = (e:ChangeEvent<HTMLInputElement>) => {setMaxValue(Number(e.currentTarget.value))}\n\n\n    //  локалстораж\n    const setLocalStorage = () => {\n        localStorage.setItem(\"MaxValue\",JSON.stringify(maxValue))\n        localStorage.setItem(\"StartValue\",JSON.stringify(startValue))\n    }\n    useEffect(() => {getLocalStorageHandler()},[])\n\n    const getLocalStorageHandler = () => {\n        let max = localStorage.getItem(\"MaxValue\")\n        let min = localStorage.getItem(\"StartValue\")\n        setMaxValue(max && JSON.parse(max))\n        setStartValue(min && JSON.parse(min))\n        setCounter(min && JSON.parse(min))\n    }\n\n\n    // стейт отображения настроек счетчика\n    const [mode, setMode] = useState<boolean>(true)\n    const saveSettings = () => {\n        setMode(!mode)\n        setLocalStorage()\n        setCounter(startValue)\n    }\n//логика ошибки\n\n\n    //UI\n    return (\n        mode\n            ? <div className=\"App\">\n                <div className={\"wrapper\"}>\n                    <Display value={counter} maxValue={maxValue} startValue={startValue}/>\n                    <span className={\"buttContainer\"}>\n                    <Button name={\"INC\"} callback={inc} disabled={counter >= maxValue}/>\n                    <Button name={\"RESET\"} callback={reset} disabled={counter === startValue}/>\n                    <Button name={\"SET\"} callback={() => {setMode(!mode)}}/>\n                </span>\n                </div>\n            </div>\n            : <div className=\"App\">\n                <div className={\"wrapper\"}>\n                    <div className={\"display\"}>\n\n                        <span className={maxValue<=startValue?\"spanError\":\"\"}>Max Value </span>\n                        <input\n                            value={maxValue}\n                            className={maxValue<=startValue?\"inputSetError\":\"inputSet\"}\n                            type={\"number\"}\n                            onChange={maxValueHandler}\n                        />\n                        <br/>\n                        <span className={maxValue<=startValue?\"spanError\":\"\"}>Start Value</span>\n                        <input\n                            value={startValue}\n                            className={maxValue<=startValue || startValue < 0?\"inputSetError\":\"inputSet\"}\n                            type={\"number\"}\n                            onChange={(e)=>{setStartValue(Number(e.currentTarget.value)); setCounter(Number(e.currentTarget.value))}}\n                        />\n                    </div>\n\n                    <span className={\"buttContainerSet\"}>\n                    <Button\n                        disabled={startValue >= maxValue || startValue < 0}\n                        name={\"SAVE\"}\n                        callback={saveSettings}\n\n                    />\n                </span>\n                </div>\n            </div>\n    )\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}